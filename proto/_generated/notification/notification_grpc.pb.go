// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: notification/notification.proto

package notification

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	NotificationServices_CreateDeviceToken_FullMethodName = "/notification.NotificationServices/CreateDeviceToken"
	NotificationServices_SendNotification_FullMethodName  = "/notification.NotificationServices/SendNotification"
)

// NotificationServicesClient is the client API for NotificationServices service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NotificationServicesClient interface {
	CreateDeviceToken(ctx context.Context, in *CreateDeviceTokenRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SendNotification(ctx context.Context, in *SendNotificationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type notificationServicesClient struct {
	cc grpc.ClientConnInterface
}

func NewNotificationServicesClient(cc grpc.ClientConnInterface) NotificationServicesClient {
	return &notificationServicesClient{cc}
}

func (c *notificationServicesClient) CreateDeviceToken(ctx context.Context, in *CreateDeviceTokenRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, NotificationServices_CreateDeviceToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationServicesClient) SendNotification(ctx context.Context, in *SendNotificationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, NotificationServices_SendNotification_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NotificationServicesServer is the server API for NotificationServices service.
// All implementations should embed UnimplementedNotificationServicesServer
// for forward compatibility
type NotificationServicesServer interface {
	CreateDeviceToken(context.Context, *CreateDeviceTokenRequest) (*emptypb.Empty, error)
	SendNotification(context.Context, *SendNotificationRequest) (*emptypb.Empty, error)
}

// UnimplementedNotificationServicesServer should be embedded to have forward compatible implementations.
type UnimplementedNotificationServicesServer struct {
}

func (UnimplementedNotificationServicesServer) CreateDeviceToken(context.Context, *CreateDeviceTokenRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDeviceToken not implemented")
}
func (UnimplementedNotificationServicesServer) SendNotification(context.Context, *SendNotificationRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendNotification not implemented")
}

// UnsafeNotificationServicesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NotificationServicesServer will
// result in compilation errors.
type UnsafeNotificationServicesServer interface {
	mustEmbedUnimplementedNotificationServicesServer()
}

func RegisterNotificationServicesServer(s grpc.ServiceRegistrar, srv NotificationServicesServer) {
	s.RegisterService(&NotificationServices_ServiceDesc, srv)
}

func _NotificationServices_CreateDeviceToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDeviceTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServicesServer).CreateDeviceToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotificationServices_CreateDeviceToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServicesServer).CreateDeviceToken(ctx, req.(*CreateDeviceTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationServices_SendNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendNotificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServicesServer).SendNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotificationServices_SendNotification_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServicesServer).SendNotification(ctx, req.(*SendNotificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NotificationServices_ServiceDesc is the grpc.ServiceDesc for NotificationServices service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NotificationServices_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "notification.NotificationServices",
	HandlerType: (*NotificationServicesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateDeviceToken",
			Handler:    _NotificationServices_CreateDeviceToken_Handler,
		},
		{
			MethodName: "SendNotification",
			Handler:    _NotificationServices_SendNotification_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "notification/notification.proto",
}
