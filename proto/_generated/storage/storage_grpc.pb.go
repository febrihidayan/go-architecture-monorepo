// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: storage/storage.proto

package storage

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	StorageServices_UpdateCloudApprove_FullMethodName = "/storage.StorageServices/UpdateCloudApprove"
	StorageServices_DeleteCloudApprove_FullMethodName = "/storage.StorageServices/DeleteCloudApprove"
)

// StorageServicesClient is the client API for StorageServices service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StorageServicesClient interface {
	UpdateCloudApprove(ctx context.Context, in *CloudApproveRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteCloudApprove(ctx context.Context, in *CloudApproveRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type storageServicesClient struct {
	cc grpc.ClientConnInterface
}

func NewStorageServicesClient(cc grpc.ClientConnInterface) StorageServicesClient {
	return &storageServicesClient{cc}
}

func (c *storageServicesClient) UpdateCloudApprove(ctx context.Context, in *CloudApproveRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, StorageServices_UpdateCloudApprove_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageServicesClient) DeleteCloudApprove(ctx context.Context, in *CloudApproveRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, StorageServices_DeleteCloudApprove_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StorageServicesServer is the server API for StorageServices service.
// All implementations should embed UnimplementedStorageServicesServer
// for forward compatibility.
type StorageServicesServer interface {
	UpdateCloudApprove(context.Context, *CloudApproveRequest) (*emptypb.Empty, error)
	DeleteCloudApprove(context.Context, *CloudApproveRequest) (*emptypb.Empty, error)
}

// UnimplementedStorageServicesServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedStorageServicesServer struct{}

func (UnimplementedStorageServicesServer) UpdateCloudApprove(context.Context, *CloudApproveRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCloudApprove not implemented")
}
func (UnimplementedStorageServicesServer) DeleteCloudApprove(context.Context, *CloudApproveRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCloudApprove not implemented")
}
func (UnimplementedStorageServicesServer) testEmbeddedByValue() {}

// UnsafeStorageServicesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StorageServicesServer will
// result in compilation errors.
type UnsafeStorageServicesServer interface {
	mustEmbedUnimplementedStorageServicesServer()
}

func RegisterStorageServicesServer(s grpc.ServiceRegistrar, srv StorageServicesServer) {
	// If the following call pancis, it indicates UnimplementedStorageServicesServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&StorageServices_ServiceDesc, srv)
}

func _StorageServices_UpdateCloudApprove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloudApproveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServicesServer).UpdateCloudApprove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StorageServices_UpdateCloudApprove_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServicesServer).UpdateCloudApprove(ctx, req.(*CloudApproveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageServices_DeleteCloudApprove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloudApproveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServicesServer).DeleteCloudApprove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StorageServices_DeleteCloudApprove_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServicesServer).DeleteCloudApprove(ctx, req.(*CloudApproveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// StorageServices_ServiceDesc is the grpc.ServiceDesc for StorageServices service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StorageServices_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "storage.StorageServices",
	HandlerType: (*StorageServicesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateCloudApprove",
			Handler:    _StorageServices_UpdateCloudApprove_Handler,
		},
		{
			MethodName: "DeleteCloudApprove",
			Handler:    _StorageServices_DeleteCloudApprove_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "storage/storage.proto",
}
